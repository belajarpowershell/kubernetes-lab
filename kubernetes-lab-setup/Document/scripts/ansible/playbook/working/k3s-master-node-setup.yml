- name: Disabl Firewalld, SELinux, Multipath, and Swap
  hosts: master1
  become: true

  tasks:
    - name: Disable Firewalld
      systemd:
        name: ufw
        enabled: no
        state: stopped

    - name: Disable Multipath
      systemd:
        name: multipathd
        enabled: no
        state: stopped

    - name: Disable Swap
      ansible.builtin.mount:
        path: swap
        state: absent
  tasks:
    - name: Add k8s.lab to search domain
      lineinfile:
        path: /etc/netplan/00-installer-config.yaml
        regexp: '^(\s+search: \[)(.*)\]'
        line: '\1\2"k8s.lab"]'
        backrefs: yes
      notify:
        - Apply netplan configuration

    - name: Apply netplan configuration
      command: netplan apply
      become: true
  tasks:
    - name: Create /var/log/kubernetes directory
      ansible.builtin.file:
        path: /var/log/kubernetes
        state: directory

    - name: Create /var/log/kubernetes/audit directory
      ansible.builtin.file:
        path: /var/log/kubernetes/audit
        state: directory

    - name: Create /var/lib/rancher directory
      ansible.builtin.file:
        path: /var/lib/rancher/
        state: directory

    - name: Create /var/lib/rancher/k3s directory
      ansible.builtin.file:
        path: /var/lib/rancher/k3s
        state: directory

    - name: Create /var/lib/rancher/k3s/server directory
      ansible.builtin.file:
        path: /var/lib/rancher/k3s/server
        state: directory

    - name: Create /var/lib/rancher/k3s/server/manifests directory
      ansible.builtin.file:
        path: /var/lib/rancher/k3s/server/manifests
        state: directory

    - name: Create audit.yaml file
      ansible.builtin.copy:
        content: |
          apiVersion: audit.k8s.io/v1 
          kind: Policy
          rules:
            - level: Metadata
        dest: /var/lib/rancher/k3s/server/manifests/audit.yaml
- name: Install K3S
  hosts: master1
  become: true
  gather_facts: false

  vars:
    k3s_version: "v1.24.6+k3s1"
    inventory_file: "/srv/k3s-ansible/playbook/inventory/hosts.ini"

  tasks:
    - name: Get Load Balancer Hostname from Inventory
      set_fact:
        load_balancer_hostname: "{{ hostvars['loadbalancer'].ansible_host }}"
    - name: Check if kubectl is installed
      command: "which kubectl"
      register: kubectl_installed
      ignore_errors: true

    - name: Check if k3s is installed master1
      command: "which k3s"
      register: k3s_installed
      ignore_errors: true

    - name: Echo kubectl Installation Status master1
      debug:
        var: kubectl_installed.rc

    - name: Echo k3s Installation Status
      debug:
        var: k3s_installed.rc    

    - name: Run K3S Installation Script
      shell: |
        curl -sfL https://get.k3s.io | \
        INSTALL_K3S_VERSION="{{ k3s_version }}" \
        sh -s - server \
        --write-kubeconfig-mode 644 \
        --tls-san "{{ load_balancer_hostname }}" \
        --cluster-init \
        --node-taint CriticalAddonsOnly=true:NoExecute \
        --disable "traefik" \
        --disable "local-storage" \
        --disable "servicelb" \
        --kube-apiserver-arg "audit-log-path=/var/log/kubernetes/audit/audit.log" \
        --kube-apiserver-arg "audit-policy-file=/var/lib/rancher/k3s/server/manifests/audit.yaml" \
        --kube-apiserver-arg "audit-log-maxsize=100" \
        --kube-apiserver-arg "audit-log-maxbackup=30"
      when: kubectl_installed.rc != 0 or k3s_installed.rc != 0



- name: Install K3S on subsequent master node
  hosts: master2
  become: true
  gather_facts: false

  vars:
    k3s_version: "v1.24.6+k3s1"
    inventory_file: "/srv/k3s-ansible/playbook/inventory/hosts.ini"

  tasks:
    - name: Get Load Balancer Hostname from Inventory
      set_fact:
        load_balancer_hostname: "{{ hostvars['loadbalancer'].ansible_host }}"
    - name: Check if kubectl is installed
      command: "which kubectl"
      register: kubectl_installed
      ignore_errors: true

    - name: Check if k3s is installed master2
      command: "which k3s"
      register: k3s_installed
      ignore_errors: true

    - name: Echo kubectl Installation Status master2
      debug:
        var: kubectl_installed.rc

    - name: Echo k3s Installation Status
      debug:
        var: k3s_installed.rc

    - name: Fetch Token from master1
      shell: "ssh 192.168.100.201 'cat /var/lib/rancher/k3s/server/node-token'"
      register: token_result
      become: true
    - name: Set Token Fact
      set_fact:
        k3s_token: "{{ token_result.stdout | trim }}"
    - name: Echo token_result
      debug:
        var: k3s_token
    - name: Run K3S Installation Script
      shell: |
        curl -sfL https://get.k3s.io | \
        INSTALL_K3S_VERSION="{{ k3s_version }}" \
                sh -s - server \
        --write-kubeconfig-mode 644 \
        --tls-san "{{ load_balancer_hostname }}" \
        --server "https://{{ load_balancer_hostname }}:6443" \
        --token "{{ k3s_token }}"
      when: kubectl_installed.rc != 0 or k3s_installed.rc != 0
