---
- name: Prereq Disable Firewalld, SELinux, Multipath, and Swap
  hosts: singleubuntu
  become: true
  

  tasks:
    - name: Disable Swap
      ansible.builtin.mount:
        path: swap
        state: absent
    - name: Create /var/log/kubernetes directory
      ansible.builtin.file:
        path: /var/log/kubernetes
        state: directory

    - name: Create /var/log/kubernetes/audit directory
      ansible.builtin.file:
        path: /var/log/kubernetes/audit
        state: directory

    - name: Create /var/lib/rancher directory
      ansible.builtin.file:
        path: /var/lib/rancher/
        state: directory

    - name: Create /var/lib/rancher/k3s directory
      ansible.builtin.file:
        path: /var/lib/rancher/k3s
        state: directory

    - name: Create /var/lib/rancher/k3s/server directory
      ansible.builtin.file:
        path: /var/lib/rancher/k3s/server
        state: directory

    - name: Create /var/lib/rancher/k3s/server/manifests directory
      ansible.builtin.file:
        path: /var/lib/rancher/k3s/server/manifests
        state: directory

    - name: Create audit.yaml file
      ansible.builtin.copy:
        content: |
          apiVersion: audit.k8s.io/v1 
          kind: Policy
          rules:
            - level: Metadata
        dest: /var/lib/rancher/k3s/server/manifests/audit.yaml


- name: Install K3S on master1
  hosts: singleubuntu
  become: true
  gather_facts: false

  vars:
    k3s_version: "v1.24.6+k3s1"

  tasks:
    - name: Get Load Balancer Hostname from Inventory
      set_fact:
        load_balancer_hostname: "{{ hostvars['singleubuntu'].inventory_hostname }}"
    - name: Check if kubectl is installed
      command: "which kubectl"
      register: kubectl_installed
      ignore_errors: true

    - name: Check if k3s is installed
      command: "which k3s"
      register: k3s_installed
      ignore_errors: true

    - name: Echo kubectl Installation Status
      debug:
        var: kubectl_installed.rc

    - name: Echo k3s Installation Status
      debug:
        var: k3s_installed.rc

    - name: Echo loadbalance-hostname
      debug:
        var: load_balancer_hostname

    - name: Run K3S Installation Script
      shell: |
        curl -sfL https://get.k3s.io | \
        INSTALL_K3S_VERSION="{{ k3s_version }}" \
        sh -s - server \
        --write-kubeconfig-mode 644 \
        --tls-san "{{ load_balancer_hostname }}" \
        --disable "traefik" \
      when: kubectl_installed.rc != 0 or k3s_installed.rc != 0
    - name: Wait for node to be ready
      become: yes
      ansible.builtin.shell: $([[ $(kubectl get node $(cat /etc/hostname) -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}') == "True" ]])
      args:
        executable: /bin/bash
      register: kubelet_ready
      until: kubelet_ready.rc == 0
      retries: 60
      delay: 3



- name: Copy kubeconfig from singlenode to ansible server
  hosts: "{{ groups['singleu'][0] }}"

  tasks:
    - name: Echo generated hostname
      debug:
        var: groups['singleu'][0].ansible_host

    - name: Echo all variables for the first host in 'singleu' group
      debug:
        var: hostvars[groups['singleu'][0]].kubernetes_cluster_name

    - name: Fetch kubeconfig
      fetch:
        src: "/etc/rancher/k3s/k3s.yaml"
        dest: "./ctx-{{ hostvars[groups['singleu'][0]].kubernetes_cluster_name }}.yaml"
        flat: yes


- name: Update kubeconfig
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Get Load Balancer Hostname and Cluster Name
      set_fact:
        singleu_hostname: "{{ groups['singleu'][0] }}"
        cluster_name: "{{ hostvars[groups['singleu'][0]].kubernetes_cluster_name }}"

    - name: Replace name and IP in kubeconfig
      replace:
        path: "./ctx-{{ hostvars[groups['singleu'][0]].kubernetes_cluster_name }}.yaml"
        regexp: "https://127.0.0.1:6443"
        replace: "https://{{ groups['singleu'][0] }}:6443"
      delegate_to: localhost

    - name: Read k3s.yaml
      slurp:
        path: "./ctx-{{ hostvars[groups['singleu'][0]].kubernetes_cluster_name }}.yaml"
      register: k3s_yaml_content

    - name: Update k3s.yaml with cluster name
      set_fact:
        k3s_yaml: "{{ k3s_yaml_content.content | b64decode | from_yaml }}"
     
    - name: update cluster info
      set_fact:
        k3s_yaml: "{{ k3s_yaml | default({'clusters': []}) | combine({'clusters': [{'name':hostvars[groups['singleu'][0]].kubernetes_cluster_name , 'cluster': {'certificate-authority-data': k3s_yaml.clusters[0].cluster['certificate-authority-data'], 'server': k3s_yaml.clusters[0].cluster['server']}}]}, recursive=True) }}"
   

    - name: update user info
      set_fact:
        k3s_yaml: "{{ k3s_yaml | combine({'users': [{'name': hostvars[groups['singleu'][0]].kubernetes_cluster_name + '-default-user', 'user': {'client-certificate-data': k3s_yaml.users[0].user['client-certificate-data'], 'client-key-data': k3s_yaml.users[0].user['client-key-data'] }}]}) }}"


    - name: Update contexts info
      set_fact:
        k3s_yaml: "{{ k3s_yaml | combine({'contexts': [{'context': {'cluster': hostvars[groups['singleu'][0]].kubernetes_cluster_name, 'user': hostvars[groups['singleu'][0]].kubernetes_cluster_name  + '-default-user'}, 'name': 'ctx-' + hostvars[groups['singleu'][0]].kubernetes_cluster_name}]} ) }}"

    - name: Update current-context
      set_fact:
        k3s_yaml: "{{ k3s_yaml | combine({'current-context': 'ctx-' + hostvars[groups['singleu'][0]].kubernetes_cluster_name }) }}"


    - name: Write updated k3s.yaml
      copy:
        content: "{{ k3s_yaml | to_nice_yaml(indent=2) }}"
        dest: "./ctx-{{ hostvars[groups['singleu'][0]].kubernetes_cluster_name }}.yaml"

    - name: Write update file to folder ~/.kube/
      copy:
        content: "{{ k3s_yaml | to_nice_yaml(indent=2) }}"
        dest: "~/.kube/ctx-{{ hostvars[groups['singleu'][0]].kubernetes_cluster_name }}.yaml"
